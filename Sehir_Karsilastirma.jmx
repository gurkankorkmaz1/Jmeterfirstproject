<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.5">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Sehir_Karsilastirma" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API 1" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="q" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">atina</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">q</stringProp>
              </elementProp>
              <elementProp name="appid" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">58197687763510e00d873a5bc3bcc1ec</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">appid</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.openweathermap.org</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/data/2.5/weather</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">il1</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$..weather[-1:0].main</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">NOT FOUND</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">def baseUrl = vars.get(&quot;https://api.openweathermap.org&quot;);
def apiKey = vars.get(&quot;58197687763510e00d873a5bc3bcc1ec&quot;);
def il1 = vars.get(&quot;il1&quot;);
def testmessage=vars.get(&quot;il1Durum&quot;);
String yagissiz=[&quot;Clouds&quot;,&quot;Dust&quot;,&quot;Mist&quot;,&quot;Smoke&quot;,&quot;Haze&quot;,&quot;Fog&quot;,&quot;Sand&quot;,&quot;Ash&quot;,&quot;Squall&quot;,&quot;Tornado&quot;,&quot;Clear&quot;]
String yagisli=[&quot;Snow&quot;,&quot;Thunderstorm&quot;,&quot;Drizzle&quot;,&quot;Rain&quot;]
    il1HavaDurumu=vars.get(&quot;il1&quot;);
    vars.put(&quot;İl1HavaDurum&quot;,il1HavaDurumu);
    if(yagisli.contains(il1HavaDurumu))
      {
            vars.put(&quot;il1HavaDurumu&quot;,&quot;Yağışlı&quot;);
            log.info(&quot;il1 Yağışlı&quot;);
      }
        else
         {
         vars.put(&quot;il1HavaDurumu&quot;,&quot;Yağışsız&quot;);
            log.info(&quot;il1 Yağışsız&quot;);
      }

            OUT.print(testmessage);</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="false">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API 2" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="q" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">sydney</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">q</stringProp>
              </elementProp>
              <elementProp name="appid" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">5ed9e294413e431a8d1f3f74e69d18c4</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">appid</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api.openweathermap.org</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/data/2.5/weather</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">il2</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$..weather[-1:0].main</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">NOT FOUND</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">def baseUrl = vars.get(&quot;https://api.openweathermap.org&quot;);
def apiKey = vars.get(&quot;5ed9e294413e431a8d1f3f74e69d18c4&quot;);
def il2 = vars.get(&quot;il2&quot;);
def testmessage=vars.get(&quot;il2Durum&quot;);
def karsilastirma;
String yagissiz=[&quot;Clouds&quot;,&quot;Dust&quot;,&quot;Mist&quot;,&quot;Smoke&quot;,&quot;Haze&quot;,&quot;Fog&quot;,&quot;Sand&quot;,&quot;Ash&quot;,&quot;Squall&quot;,&quot;Tornado&quot;,&quot;Clear&quot;]
String yagisli=[&quot;Snow&quot;,&quot;Thunderstorm&quot;,&quot;Drizzle&quot;,&quot;Rain&quot;]
    il2HavaDurumu=vars.get(&quot;il2&quot;);
    vars.put(&quot;İl2HavaDurum&quot;,il2HavaDurumu);
    if(yagisli.contains(il2HavaDurumu))
      {
            vars.put(&quot;il2HavaDurumu&quot;,&quot;Yağışlı&quot;);
            log.info(&quot;il2 Yağışlı&quot;);
      }
        else
         {
         vars.put(&quot;il2HavaDurumu&quot;,&quot;Yağışsız&quot;);
            log.info(&quot;il2 Yağışsız&quot;);
      }

            OUT.print(testmessage);
String var1 = vars.get(&quot;il1HavaDurumu&quot;);
String var2 = vars.get(&quot;il2HavaDurumu&quot;);

Failure = !var1.equals(var2);

if (Failure) {
    vars.put(&quot;karsilastirma&quot;,&quot;Failed&quot;);
     log.info(&quot;İki Durum da Farklı&quot;);
}
else
{
    vars.put(&quot;karsilastirma&quot;,&quot;Passed&quot;);
     log.info(&quot;İki durum da Aynı&quot;);
}
    
    
   
    

 </stringProp>
          </JSR223Assertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="false">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">if((&quot;il1HavaDurumu&quot;).equals((&quot;il2HavaDurumu&quot;)))
{
     vars.put(&quot;karsilastirma&quot;,&quot;Passed&quot;);
     log.info(&quot;İki Durum da aynı&quot;);
}
else
{
     vars.put(&quot;karsilastirma&quot;,&quot;Failed&quot;);
     log.info(&quot;İki durum da farklı&quot;);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="false">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">//karşılaştırma yap
    if(il1HavaDurumu === il2HavaDurumu)
    {
        vars.put(&quot;Karşılaştırma&quot;,&quot;İki Durumda Aynı&quot;);
        log.info(&quot;İki Durumda Aynı&quot;);
    }
    else
    {
        vars.put(&quot;Karşılaştırma&quot;,&quot;İki Durum Farklı&quot;);
        log.info(&quot;İki Durum Farklı&quot;);
    }
    //var testmessage = vars.get(&quot;İl2Durum&quot;);
    //var testmessage2 = vars.get(&apos;Karşılaştırma&apos;);
    //log.info(&quot;İl2 Hava Durumu=&quot;+testmessage+&quot;   Hava Durumu Karşılaştırma=&quot;+testmessage2)
    //});
    //});
/*var baseUrl = pm.collectionVariables.get(&apos;baseUrl&apos;)
var apiKey = pm.collectionVariables.get(&apos;apiKey&apos;)
var il2 = pm.collectionVariables.get(&apos;il2&apos;) 
var testmessage=pm.environment.get(&apos;İl2Durum&apos;)
var testmessage2=pm.environment.get(&apos;Karşılaştırma&apos;)
const yagissiz=[&quot;Clouds&quot;,&quot;Dust&quot;,&quot;Mist&quot;,&quot;Smoke&quot;,&quot;Haze&quot;,&quot;Fog&quot;,&quot;Sand&quot;,&quot;Ash&quot;,&quot;Squall&quot;,&quot;Tornado&quot;,&quot;Clear&quot;]
const yagisli=[&quot;Snow&quot;,&quot;Thunderstorm&quot;,&quot;Drizzle&quot;,&quot;Rain&quot;]
    pm.test(&quot;2. il hava durumu ve Kıyaslama&quot;,function(){
    pm.sendRequest(baseUrl+&apos;/data/2.5/weather?q=&apos;+il2+&apos;&amp;appid=&apos;+apiKey, function (err, response) {
    il2HavaDurum = response.json()[&apos;weather&apos;][0].main
    pm.environment.set(&apos;İl2HavaDurum&apos;,il2HavaDurum)
    
    if(yagisli.includes(il2HavaDurum))
    {
        pm.environment.set(&apos;İl2Durum&apos;,&quot;Yağışlı&quot;)
        console.log(&quot;İl2 Yağışlı&quot;)
    }
    else{
        pm.environment.set(&apos;İl2Durum&apos;,&quot;Yağışsız&quot;)
        console.log(&quot;İl2 Yağışsız&quot;)
    }
    if(Object.is((pm.environment.get(&apos;İl2Durum&apos;)),(pm.environment.get(&apos;İl1Durum&apos;))))
    {
        pm.environment.set(&apos;Karşılaştırma&apos;,&apos;İki Durumda Aynı&apos;)
    }
    else
    {
        pm.environment.set(&apos;Karşılaştırma&apos;,&apos;İki Durum Farklı&apos;)
    }
    var testmessage=pm.environment.get(&apos;İl2Durum&apos;)
    var testmessage2=pm.environment.get(&apos;Karşılaştırma&apos;)
    pm.test(&quot;İl2 Hava Durumu=&quot;+testmessage+&quot;   Hava Durumu Karşılaştırma=&quot;+testmessage2)
    });
    });*/
    def testmessage2= vars.get(&quot;İl2Durum&quot;)
    def testmessage3= vars.get(&quot;Karşılaştırma&quot;)
    test(&quot;İl2 Hava Durumu=&quot;+testmessage+&quot;   Hava Durumu Karşılaştırma=&quot;+testmessage2);
    //
    if((&quot;il1HavaDurumu&quot;).equals((&quot;il2HavaDurumu&quot;)))
{
     vars.put(&quot;karsilastirma&quot;,&quot;Passed&quot;);
     log.info(&quot;İki Durum da Aynı&quot;);
}
else
{
     vars.put(&quot;karsilastirma&quot;,&quot;Failed&quot;);
     log.info(&quot;İki durum da farklı&quot;);
}
//
if(&quot;il1HavaDurumu&quot; === &quot;il2HavaDurumu&quot;)
    {
        vars.put(&quot;Karşılaştırma&quot;,&quot;İki Durumda Aynı&quot;);
        log.info(&quot;İki Durumda Aynı&quot;);
    }
    else
    {
        vars.put(&quot;Karşılaştırma&quot;,&quot;İki Durum Farklı&quot;);
        log.info(&quot;İki Durum Farklı&quot;);
    }</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
